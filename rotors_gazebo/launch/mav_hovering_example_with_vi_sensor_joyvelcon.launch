<launch>
  <env name="ROSCONSOLE_CONFIG_FILE" value="$(find rotors_control)/rosconsole.config"/>
  <arg name="mav_name" default="firefly"/>
  <arg name="world_name" default="riverside"/>  <!-- basic -->
  <arg name="enable_logging" default="false" />
  <arg name="enable_ground_truth" default="true" />
  <arg name="log_file" default="$(arg mav_name)" />

  <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models"/>
  <env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models"/>
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find rotors_gazebo)/worlds/$(arg world_name).world" />
    <!-- <arg name="debug" value="true"/> -->
    <arg name="paused" value="true"/>
    <!-- <arg name="gui" value="false"/> -->
    <!-- <arg name="verbose" value="true"/> -->
  </include>

  <group ns="$(arg mav_name)">
    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="model" value="$(find rotors_description)/urdf/mav_with_vi_sensor.gazebo" />
      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="log_file" value="$(arg log_file)"/>
    </include>
    <node name="lee_position_controller_node" pkg="rotors_control" type="lee_position_controller_node" output="screen">
      <rosparam command="load" file="$(find rotors_gazebo)/resource/lee_controller_$(arg mav_name).yaml" />
      <rosparam command="load" file="$(find rotors_gazebo)/resource/$(arg mav_name).yaml" />
      <remap from="odometry" to="odometry_sensor1/odometry" />
    </node>
    <node name="hovering_example" pkg="rotors_gazebo" type="hovering_example" output="screen"/>
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
  </group>

  <node name="joystick_velocity_controller" pkg="rotors_control" type="joy_trjvel_cntl_node" output="screen">
    <rosparam> <!-- controller option setup: wired xbox("xbox") or wireless ps4("ps4") -->
      name_cntl: "xbox"
    </rosparam>    
  </node>

  <node pkg="nodelet" type="nodelet" name="test_nodelet"  args="manager" output="screen"/>
  <node pkg="nodelet" type="nodelet" name="pointcloud_transformer" args="load transform_pointcloud/transformPointcloud test_nodelet" output="screen">
    <param name="to_frame" value="/firefly/gimbal_base_link"/>
    <remap from="~input_pcl2" to="/firefly/vi_sensor/camera_depth/depth/points"/>
  </node>

  <arg name="changeIdFrame" default="/talker/changes"/>
	<node pkg="octomap_server" type="octomap_tracking_server_node" name="octomap_talker" output="screen">
		<param name="resolution" value="0.25" />
		<param name="frame_id" type="string" value="/world" />
    <param name="base_frame_id" type="string" value="/firefly/gimbal_base_link" />
		<param name="sensor_model/max_range" value="30.0" />
		<param name="track_changes" value="true"/>
		<param name="listen_changes" value="false"/>
    <param name="change_id_frame" value="$(arg changeIdFrame)" />
		<param name="topic_changes" value="/octomap_tracking_server/changeset" />
		<remap from="cloud_in" to="/pointcloud_transformer/output_pcl2" />
	</node>

	<!-- <node pkg="octomap_server" type="octomap_tracking_server_node" name="octomap_listener" output="screen">
		<param name="resolution" value="0.25" />
		<param name="frame_id" type="string" value="/world" />
		<param name="sensor_model/max_range" value="30.0" />
		<param name="save_directory" value="$(optenv OCTOMAP_SAVE_DIR2 ./)" />
		<param name="track_changes" value="false"/>
		<param name="listen_changes" value="true"/>
		<param name="topic_changes" value="/octomap_tracking_server/changeset" />
		<remap from="cloud_in" to="/pointcloud_transformer/output_pcl2" />
	</node> -->

</launch>
